{"version":3,"sources":["bundle.concat.js"],"names":["angular","module","component","controller","DemoListController","templateUrl","vm","$onInit","items","createRandomItemList","itemFactories","createSmallItem","bind","createLargeItem","Array","fill","map","_","id","type","Math","floor","random","title","isLarge","project","postcode","projectManager","directive","$log","$window","OFFSET_COUNT","scrollerSizerElement","scrollerOffsetElement","scrollerElement","resizeScroller","container","element","windowHeight","innerHeight","scrollerTopPosition","offset","top","bodyPadding","headerHeight","scrollerHeight","height","resizeScrollerSizer","closestNumberIndex","number","numbers","current","currentIndex","difference","abs","val","length","newDifference","updateOffsetYPosition","css","transform","position","handleScroll","sizerHeight","renderedItems","scrollPosition","scrollTop","rowPositions","Object","keys","closestRowIndex","start","end","indexes","slice","forEach","indexOf","$","hide","show","updatePosition","max","resetScroller","trigger","restrict","transclude","scope","link","$watch","on","VirtualListController","bindings","$inject","$timeout","each","row","offsetTop"],"mappings":"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","file":"bundle.transpiled.js","sourcesContent":["(function (angular) {\n  angular.module('app', []);\n})(angular);\n\n(function (angular) {\n  angular\n    .module('app')\n    .component('demoList', {\n      controller: DemoListController,\n      templateUrl: 'src/components/demo-list/demo-list.tpl.html',\n    });\n\n  function DemoListController() {\n    const vm = this;\n\n    vm.$onInit = () => {\n      vm.items = createRandomItemList();\n    };\n\n    const createRandomItemList = () => {\n      const itemFactories = {\n        1: createSmallItem.bind(null),\n        2: createLargeItem.bind(null),\n      };\n\n      return Array(1000).fill().map((_, id) => {\n        const type = Math.floor((Math.random() * 2) + 1);\n        return itemFactories[type](id);\n      });\n    };\n\n    const createSmallItem = (id) => ({\n      id: id,\n      title: `Entry #${id}`,\n      isLarge: false,\n    });\n\n    const createLargeItem = (id) => ({\n      id: id,\n      title: `Entry #${id}`,\n      isLarge: true,\n      project: Math.floor((Math.random() * 15000) + 1),\n      postcode: 'B7 4BB',\n      projectManager: 'Alex',\n    });\n\n  }\n})(angular);\n\n\n(function (angular) {\n  angular\n    .module('app')\n    .directive('virtualListScroller', ['$log', '$window', function ($log, $window) {\n      const OFFSET_COUNT = 10;\n      let scrollerSizerElement = null;\n      let scrollerOffsetElement = null;\n      let scrollerElement = null;\n\n      /**\n       * Update the size of the scroller container so that it fills the available space.\n       */\n      const resizeScroller = () => {\n        const container = angular.element('#js-scroller-container');\n        const windowHeight = $window.innerHeight;\n        const scrollerTopPosition = container.offset().top;\n        const bodyPadding = 20;\n        const headerHeight = 100;\n        const scrollerHeight = (windowHeight - scrollerTopPosition - bodyPadding - headerHeight);\n\n        container.height(scrollerHeight);\n      };\n\n      const resizeScrollerSizer = height => {\n        if (scrollerSizerElement === null) {\n          return;\n        }\n\n        scrollerSizerElement.height(height);\n      };\n\n      /**\n       * Find the closest number in an array of numbers compared to the number provided\n       *\n       * @param number\n       * @param numbers\n       * @return {number}\n       */\n      const closestNumberIndex = (number, numbers) => {\n        let current = numbers[0];\n        let currentIndex = 0;\n        let difference = Math.abs(number - current);\n\n        for (let val = 0; val < numbers.length; val++) {\n          const newDifference = Math.abs(number - numbers[val]);\n\n          if (newDifference < difference) {\n            difference = newDifference;\n            current = numbers[val];\n            currentIndex = val;\n          }\n        }\n\n        return currentIndex;\n      };\n\n      const updateOffsetYPosition = position => {\n        scrollerOffsetElement.css({ transform: `translateY(${position}px)` });\n      };\n\n      const handleScroll = (sizerHeight, renderedItems) => {\n        const scrollPosition = scrollerElement.scrollTop();\n\n        // If we are already at the bottom of the list then don't do anything else\n        if (scrollPosition >= sizerHeight) {\n          updateOffsetYPosition(sizerHeight);\n          return;\n        }\n\n        // Find the closest row to our current scroll position\n        const rowPositions = Object.keys(renderedItems);\n        const closestRowIndex = closestNumberIndex(scrollPosition, rowPositions);\n\n        // Find the rows that we need to render\n        const start = (closestRowIndex - OFFSET_COUNT) >= 0 ? (closestRowIndex - OFFSET_COUNT) : 0;\n        const end = (closestRowIndex + OFFSET_COUNT) <= rowPositions.length ? (closestRowIndex + OFFSET_COUNT) : rowPositions.length;\n        const indexes = rowPositions.slice(start, end);\n\n        // Hide the rows we don't need to render and show the ones that do need to be rendered\n        rowPositions.forEach(position => {\n          if (indexes.indexOf(position) === -1) {\n            $(renderedItems[position]).hide();\n          } else {\n            $(renderedItems[position]).show();\n          }\n        });\n\n        // Update the Y position once the offset amount above are shown\n        const updatePosition = Math.max(0, closestRowIndex - OFFSET_COUNT) === 0 ? 0 : indexes[0];\n        updateOffsetYPosition(updatePosition);\n      };\n\n      /**\n       * Show all of the elements and move the scroll bar to the top\n       *\n       * @param renderedItems\n       */\n      const resetScroller = (renderedItems) => {\n\n        if (scrollerElement) {\n          scrollerElement.scrollTop(0);\n        }\n\n        Object\n          .keys(renderedItems)\n          .forEach(position => {\n            $(renderedItems[position]).show();\n          });\n\n        scrollerElement.trigger('scroll');\n      };\n\n      return {\n        restrict: 'A',\n        transclude: true,\n        scope: {\n          sizerHeight: '<',\n          renderedItems: '<',\n        },\n        templateUrl: 'src/components/virtual-list-scroller/virtual-list-scroller.tpl.html',\n        link: function (scope) {\n          scrollerElement = $('.scroller');\n          scrollerSizerElement = $('.js-scroller-sizer');\n          scrollerOffsetElement = $('.js-scroller-offset');\n\n          // Resize when the directive is created\n          // angular.element($window).on('resize', resizeScroller).trigger('resize');\n\n          scope.$watch('sizerHeight', resizeScrollerSizer);\n          scope.$watch('renderedItems', () => {\n            if (scope.renderedItems) {\n              resetScroller(scope.renderedItems);\n            }\n          });\n\n          scrollerElement.on('scroll', () => handleScroll(scope.sizerHeight, scope.renderedItems));\n        },\n      };\n    }]);\n})(angular);\n\n\n(function (angular) {\n  angular\n    .module('app')\n    .component('virtualList', {\n      controller: VirtualListController,\n      templateUrl: 'src/components/virtual-list/virtual-list.tpl.html',\n      bindings: {\n        'items': '<',\n      },\n    });\n\n  VirtualListController.$inject = ['$timeout'];\n\n  function VirtualListController($timeout) {\n    const vm = this;\n\n    vm.$onInit = () => {\n      $timeout(function () {\n        const renderedItems = {};\n\n        $('.js-list-row').each(function () {\n          const row = $(this)[0];\n          renderedItems[row.offsetTop] = row;\n        });\n\n        vm.renderedItems = renderedItems;\n        vm.scrollerHeight = Object.keys(renderedItems).slice(-1)[0];\n      });\n    };\n  }\n})(angular);\n\n\n//# sourceMappingURL=bundle.concat.js.map"]}