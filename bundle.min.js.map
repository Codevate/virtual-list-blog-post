{"version":3,"sources":["bundle.concat.js"],"names":["angular","module","component","controller","vm","this","$onInit","items","createRandomItemList","itemFactories","1","createSmallItem","bind","2","createLargeItem","Array","fill","map","_","id","type","Math","floor","random","title","isLarge","project","postcode","projectManager","templateUrl","directive","$log","$window","scrollerSizerElement","scrollerOffsetElement","scrollerElement","resizeScrollerSizer","height","closestNumberIndex","number","numbers","current","currentIndex","difference","abs","val","length","newDifference","updateOffsetYPosition","position","css","transform","handleScroll","sizerHeight","renderedItems","scrollPosition","scrollTop","rowPositions","Object","keys","closestRowIndex","start","end","indexes","slice","forEach","indexOf","$","hide","show","updatePosition","max","resetScroller","trigger","restrict","transclude","scope","link","$watch","on","VirtualListController","$timeout","each","row","offsetTop","scrollerHeight","bindings","$inject"],"mappings":"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","file":"bundle.min.js","sourcesContent":["(function (angular) {\n  angular.module('app', []);\n})(angular);\n\n(function (angular) {\n  angular\n    .module('app')\n    .component('demoList', {\n      controller: DemoListController,\n      templateUrl: 'src/components/demo-list/demo-list.tpl.html',\n    });\n\n  function DemoListController() {\n    const vm = this;\n\n    vm.$onInit = () => {\n      vm.items = createRandomItemList();\n    };\n\n    const createRandomItemList = () => {\n      const itemFactories = {\n        1: createSmallItem.bind(null),\n        2: createLargeItem.bind(null),\n      };\n\n      return Array(1000).fill().map((_, id) => {\n        const type = Math.floor((Math.random() * 2) + 1);\n        return itemFactories[type](id);\n      });\n    };\n\n    const createSmallItem = (id) => ({\n      id: id,\n      title: `Entry #${id}`,\n      isLarge: false,\n    });\n\n    const createLargeItem = (id) => ({\n      id: id,\n      title: `Entry #${id}`,\n      isLarge: true,\n      project: Math.floor((Math.random() * 15000) + 1),\n      postcode: 'B7 4BB',\n      projectManager: 'Alex',\n    });\n\n  }\n})(angular);\n\n\n(function (angular) {\n  angular\n    .module('app')\n    .directive('virtualListScroller', ['$log', '$window', function ($log, $window) {\n      const OFFSET_COUNT = 10;\n      let scrollerSizerElement = null;\n      let scrollerOffsetElement = null;\n      let scrollerElement = null;\n\n      /**\n       * Update the size of the scroller container so that it fills the available space.\n       */\n      const resizeScroller = () => {\n        const container = angular.element('#js-scroller-container');\n        const windowHeight = $window.innerHeight;\n        const scrollerTopPosition = container.offset().top;\n        const bodyPadding = 20;\n        const headerHeight = 100;\n        const scrollerHeight = (windowHeight - scrollerTopPosition - bodyPadding - headerHeight);\n\n        container.height(scrollerHeight);\n      };\n\n      const resizeScrollerSizer = height => {\n        if (scrollerSizerElement === null) {\n          return;\n        }\n\n        scrollerSizerElement.height(height);\n      };\n\n      /**\n       * Find the closest number in an array of numbers compared to the number provided\n       *\n       * @param number\n       * @param numbers\n       * @return {number}\n       */\n      const closestNumberIndex = (number, numbers) => {\n        let current = numbers[0];\n        let currentIndex = 0;\n        let difference = Math.abs(number - current);\n\n        for (let val = 0; val < numbers.length; val++) {\n          const newDifference = Math.abs(number - numbers[val]);\n\n          if (newDifference < difference) {\n            difference = newDifference;\n            current = numbers[val];\n            currentIndex = val;\n          }\n        }\n\n        return currentIndex;\n      };\n\n      const updateOffsetYPosition = position => {\n        scrollerOffsetElement.css({ transform: `translateY(${position}px)` });\n      };\n\n      const handleScroll = (sizerHeight, renderedItems) => {\n        const scrollPosition = scrollerElement.scrollTop();\n\n        // If we are already at the bottom of the list then don't do anything else\n        if (scrollPosition >= sizerHeight) {\n          updateOffsetYPosition(sizerHeight);\n          return;\n        }\n\n        // Find the closest row to our current scroll position\n        const rowPositions = Object.keys(renderedItems);\n        const closestRowIndex = closestNumberIndex(scrollPosition, rowPositions);\n\n        // Find the rows that we need to render\n        const start = (closestRowIndex - OFFSET_COUNT) >= 0 ? (closestRowIndex - OFFSET_COUNT) : 0;\n        const end = (closestRowIndex + OFFSET_COUNT) <= rowPositions.length ? (closestRowIndex + OFFSET_COUNT) : rowPositions.length;\n        const indexes = rowPositions.slice(start, end);\n\n        // Hide the rows we don't need to render and show the ones that do need to be rendered\n        rowPositions.forEach(position => {\n          if (indexes.indexOf(position) === -1) {\n            $(renderedItems[position]).hide();\n          } else {\n            $(renderedItems[position]).show();\n          }\n        });\n\n        // Update the Y position once the offset amount above are shown\n        const updatePosition = Math.max(0, closestRowIndex - OFFSET_COUNT) === 0 ? 0 : indexes[0];\n        updateOffsetYPosition(updatePosition);\n      };\n\n      /**\n       * Show all of the elements and move the scroll bar to the top\n       *\n       * @param renderedItems\n       */\n      const resetScroller = (renderedItems) => {\n\n        if (scrollerElement) {\n          scrollerElement.scrollTop(0);\n        }\n\n        Object\n          .keys(renderedItems)\n          .forEach(position => {\n            $(renderedItems[position]).show();\n          });\n\n        scrollerElement.trigger('scroll');\n      };\n\n      return {\n        restrict: 'A',\n        transclude: true,\n        scope: {\n          sizerHeight: '<',\n          renderedItems: '<',\n        },\n        templateUrl: 'src/components/virtual-list-scroller/virtual-list-scroller.tpl.html',\n        link: function (scope) {\n          scrollerElement = $('.scroller');\n          scrollerSizerElement = $('.js-scroller-sizer');\n          scrollerOffsetElement = $('.js-scroller-offset');\n\n          // Resize when the directive is created\n          // angular.element($window).on('resize', resizeScroller).trigger('resize');\n\n          scope.$watch('sizerHeight', resizeScrollerSizer);\n          scope.$watch('renderedItems', () => {\n            if (scope.renderedItems) {\n              resetScroller(scope.renderedItems);\n            }\n          });\n\n          scrollerElement.on('scroll', () => handleScroll(scope.sizerHeight, scope.renderedItems));\n        },\n      };\n    }]);\n})(angular);\n\n\n(function (angular) {\n  angular\n    .module('app')\n    .component('virtualList', {\n      controller: VirtualListController,\n      templateUrl: 'src/components/virtual-list/virtual-list.tpl.html',\n      bindings: {\n        'items': '<',\n      },\n    });\n\n  VirtualListController.$inject = ['$timeout'];\n\n  function VirtualListController($timeout) {\n    const vm = this;\n\n    vm.$onInit = () => {\n      $timeout(function () {\n        const renderedItems = {};\n\n        $('.js-list-row').each(function () {\n          const row = $(this)[0];\n          renderedItems[row.offsetTop] = row;\n        });\n\n        vm.renderedItems = renderedItems;\n        vm.scrollerHeight = Object.keys(renderedItems).slice(-1)[0];\n      });\n    };\n  }\n})(angular);\n\n\n//# sourceMappingURL=bundle.concat.js.map"]}